// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  username      String             @unique
  password      String
  createdAt     DateTime           @default(now())
  verified      Boolean            @default(false)
  verifiedAt    DateTime?
  profile       Profile?
  customers     Customer[]
  session       Session?
  verify        UserVerify?
  passwordReset UserPasswordReset?
}

model Profile {
  userId      Int    @id
  user        User   @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  zipCode     String
  city        String
  street      String
  houseNumber String
  bank        String
  iban        String
  bic         String
  taxNumber   String
  vatId       String
  telephone   String
  email       String
}

model Session {
  sessionId String   @unique
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime @db.Timestamp()
}

model UserVerify {
  userId Int    @id
  user   User   @relation(fields: [userId], references: [id])
  code   String
}

model UserPasswordReset {
  userId  Int      @id
  user    User     @relation(fields: [userId], references: [id])
  code    String
  expires DateTime
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  number      String
  zipCode     String
  city        String
  street      String
  houseNumber String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  projects    Project[]

  @@unique([name, userId])
  @@unique([number, userId])
}

model Project {
  id             Int            @id @default(autoincrement())
  name           String
  paymentDue     Int
  paymentDueUnit PaymentDueUnit
  customerId     Int
  customer       Customer       @relation(fields: [customerId], references: [id])
  invoices       Invoice[]
  timeTrack      TimeTrack[]

  @@unique([name, customerId])
}

model Invoice {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now()) @db.Date
  date      DateTime?         @db.Date
  number    String?           @unique
  filename  String?
  locked    Boolean           @default(false)
  projectId Int
  project   Project           @relation(fields: [projectId], references: [id])
  positions InvoicePosition[]
}

model InvoicePosition {
  id          Int                 @id @default(autoincrement())
  amount      Float
  unit        InvoicePositionUnit
  description String
  price       Float
  invoiceId   Int
  invoice     Invoice             @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model TimeTrack {
  id         Int                 @id @default(autoincrement())
  projectId  Int
  project    Project             @relation(fields: [projectId], references: [id])
  startTime  DateTime            @default(now())
  endTime    DateTime?
  activities TimeTrackActivity[]
}

model TimeTrackActivity {
  id          Int       @id @default(autoincrement())
  timeTrackId Int
  timeTrack   TimeTrack @relation(fields: [timeTrackId], references: [id], onDelete: Cascade)
  description String
}

enum PaymentDueUnit {
  days
  week
  weeks
  month
  months
}

enum InvoicePositionUnit {
  hours
  pieces
}
